// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package graph

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2419208eDecodeGithubComAJMBrandsSoftwareThatMattersGraph(in *jlexer.Lexer, out *VersionInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			out.Timestamp = string(in.String())
		case "dependencies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Dependencies = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Dependencies)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2419208eEncodeGithubComAJMBrandsSoftwareThatMattersGraph(out *jwriter.Writer, in VersionInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix[1:])
		out.String(string(in.Timestamp))
	}
	{
		const prefix string = ",\"dependencies\":"
		out.RawString(prefix)
		if in.Dependencies == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Dependencies {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				out.String(string(v2Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VersionInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2419208eEncodeGithubComAJMBrandsSoftwareThatMattersGraph(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VersionInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2419208eEncodeGithubComAJMBrandsSoftwareThatMattersGraph(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VersionInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2419208eDecodeGithubComAJMBrandsSoftwareThatMattersGraph(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VersionInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2419208eDecodeGithubComAJMBrandsSoftwareThatMattersGraph(l, v)
}
func easyjson2419208eDecodeGithubComAJMBrandsSoftwareThatMattersGraph1(in *jlexer.Lexer, out *PackageInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "versions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Versions = make(map[string]VersionInfo)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 VersionInfo
					(v3).UnmarshalEasyJSON(in)
					(out.Versions)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2419208eEncodeGithubComAJMBrandsSoftwareThatMattersGraph1(out *jwriter.Writer, in PackageInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"versions\":"
		out.RawString(prefix)
		if in.Versions == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Versions {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				(v4Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PackageInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2419208eEncodeGithubComAJMBrandsSoftwareThatMattersGraph1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PackageInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2419208eEncodeGithubComAJMBrandsSoftwareThatMattersGraph1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PackageInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2419208eDecodeGithubComAJMBrandsSoftwareThatMattersGraph1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PackageInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2419208eDecodeGithubComAJMBrandsSoftwareThatMattersGraph1(l, v)
}
func easyjson2419208eDecodeGithubComAJMBrandsSoftwareThatMattersGraph2(in *jlexer.Lexer, out *NodeInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Version":
			out.Version = string(in.String())
		case "Timestamp":
			out.Timestamp = string(in.String())
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2419208eEncodeGithubComAJMBrandsSoftwareThatMattersGraph2(out *jwriter.Writer, in NodeInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"Timestamp\":"
		out.RawString(prefix)
		out.String(string(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NodeInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2419208eEncodeGithubComAJMBrandsSoftwareThatMattersGraph2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NodeInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2419208eEncodeGithubComAJMBrandsSoftwareThatMattersGraph2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NodeInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2419208eDecodeGithubComAJMBrandsSoftwareThatMattersGraph2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NodeInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2419208eDecodeGithubComAJMBrandsSoftwareThatMattersGraph2(l, v)
}
func easyjson2419208eDecodeGithubComAJMBrandsSoftwareThatMattersGraph3(in *jlexer.Lexer, out *Doc) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pkgs":
			if in.IsNull() {
				in.Skip()
				out.Pkgs = nil
			} else {
				in.Delim('[')
				if out.Pkgs == nil {
					if !in.IsDelim(']') {
						out.Pkgs = make([]PackageInfo, 0, 2)
					} else {
						out.Pkgs = []PackageInfo{}
					}
				} else {
					out.Pkgs = (out.Pkgs)[:0]
				}
				for !in.IsDelim(']') {
					var v5 PackageInfo
					(v5).UnmarshalEasyJSON(in)
					out.Pkgs = append(out.Pkgs, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2419208eEncodeGithubComAJMBrandsSoftwareThatMattersGraph3(out *jwriter.Writer, in Doc) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pkgs\":"
		out.RawString(prefix[1:])
		if in.Pkgs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Pkgs {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Doc) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2419208eEncodeGithubComAJMBrandsSoftwareThatMattersGraph3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Doc) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2419208eEncodeGithubComAJMBrandsSoftwareThatMattersGraph3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Doc) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2419208eDecodeGithubComAJMBrandsSoftwareThatMattersGraph3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Doc) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2419208eDecodeGithubComAJMBrandsSoftwareThatMattersGraph3(l, v)
}
